{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let UsrService = /*#__PURE__*/(() => {\n  class UsrService {\n    constructor(httpClient, router) {\n      this.httpClient = httpClient;\n      this.router = router;\n      this.url = 'http://localhost:8000';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    login(data) {\n      this.httpClient.post(\"http://localhost:8000/jwt/authenticate\", data).subscribe(result => {\n        console.log(result);\n        localStorage.setItem(\"token\", result.token);\n        this.router.navigate(['/home']);\n      });\n    }\n    addUser(user) {\n      return this.httpClient.post(this.url + '/user/adduser', JSON.stringify(user), this.httpOptions).pipe(catchError(this.handleError));\n    }\n    removeUser(user) {\n      return this.httpClient.post(this.url + '/admin/removeuser', JSON.stringify(user), this.httpOptions).pipe(catchError(this.handleError));\n    }\n    handleError(eResponse) {\n      if (eResponse.error instanceof ErrorEvent) {\n        console.log('Client Side Error =' + eResponse.error.message);\n        console.log('Status Code=' + eResponse.status);\n      } else {\n        console.log('Server Side Error =' + eResponse.error.message);\n        console.log('Status Code=' + eResponse.status);\n      }\n      return throwError(eResponse.error.message);\n    }\n    static #_ = this.ɵfac = function UsrService_Factory(t) {\n      return new (t || UsrService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UsrService,\n      factory: UsrService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UsrService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}